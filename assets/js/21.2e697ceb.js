(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{304:function(s,t,a){"use strict";a.r(t);var e=a(10),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),t("p",[s._v("不推荐使用 docker commit 的方法来构建镜像。")]),s._v(" "),t("p",[s._v("推荐使用被称为 Dockfile 的定义文件和docker build命令来构建镜像。")]),s._v(" "),t("p",[s._v("Dockerfile 使用基本的基于DSL语法的指令来构建一个Docker镜像,之后使用docker build命令基于该Dockerfile中的指令构建一个新的镜像。")]),s._v(" "),t("p",[s._v("Dockerfile 由一系列指令和参数组成。每条指令如FROM都必须为大写字母,且后面要跟一个参数:FROM ubuntu:latest。")]),s._v(" "),t("p",[s._v("Dockerfile 中的指令会按顺序从上到下执行。每条指令都会创建一个新的镜像层并对镜像进行提交。")]),s._v(" "),t("p",[s._v("Dockerfile 构建镜像的流程:")]),s._v(" "),t("ul",[t("li",[s._v("Docker从基础镜像运行一个容器")]),s._v(" "),t("li",[s._v("执行一条指令,对容器进行修改")])]),s._v(" "),t("ul",[t("li",[s._v("指令类似docker commit的操作,提交一个新的镜像层")]),s._v(" "),t("li",[s._v("Docker再基于刚提交的镜像运行一个新容器")]),s._v(" "),t("li",[s._v("执行Dockerfile中的下一条指令,直到所有指令都执行完毕")])]),s._v(" "),t("h2",{attrs:{id:"dockerfile指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile指令"}},[s._v("#")]),s._v(" Dockerfile指令")]),s._v(" "),t("p",[s._v("【CMD】")]),s._v(" "),t("p",[s._v("CMD指令用于指定一个容器启动时要运行的命令。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意:")]),s._v(" "),t("p",[s._v("最后使用docker run命令可以覆盖CMD指令。")]),s._v(" "),t("p",[s._v("如果我们在Dockerfile里指定了CMD指令,而同时在docker run命令行也指定了要运行的命令,命令行中指定的命令会覆盖Dockerfile中的CMD指令。")])]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:latest")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出日期信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"date"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("使用docker build构建此镜像。")]),s._v(" "),t("p",[t("code",[s._v(".")]),s._v("表示在这个目录下,即Dockerfile文件必须在此目录中。或者是远程仓库的Dockerfile文件。如git@github.com:gocloudcoder/test1")]),s._v(" "),t("p",[s._v("v1表示标签,如果没有指定,则为latest。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gocloudcoder/test1:v1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("img",{staticStyle:{zoom:"150%"},attrs:{src:"http://oss.jaronnie.com/image-20210322150510611.png",alt:"image-20210322150510611"}}),s._v(" "),t("p",[s._v("使用docker images命令即可看到构建好的镜像")]),s._v(" "),t("p",[s._v("我们使用docker run命令运行这个镜像")]),s._v(" "),t("img",{staticStyle:{zoom:"150%"},attrs:{src:"http://oss.jaronnie.com/image-20210322150627575.png",alt:"image-20210322150627575"}}),s._v(" "),t("p",[s._v("上面提到我们可以在docker run命令中覆盖Dockerfile中的CMD指令")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run gocloudcoder/test:v1 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322151342346.png",alt:"image-20210322151342346"}})]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("注意")]),s._v(":在Dockerfile中只能指定一条CMD指令。如果指定了多条,只有最后一条生效。如果想在容器启动时运行多个进程或者多条命令,可以考虑使用Supervistor等服务管理工具。")])]),s._v(" "),t("p",[s._v("【ENTRYPOINT】")]),s._v(" "),t("p",[s._v("ENTRYPOINT指令与CMD指令非常类似。")]),s._v(" "),t("p",[s._v("但是CMD指令会在启动容器时被覆盖,为了能够让容器按照我们想象的那样去工作,那么CMD就不太适合了。")]),s._v(" "),t("p",[s._v("ENTRYPOINT指令提供的命令则不容易在启动容器时被覆盖。实际上,docker run命令中指定的任何参数都会被当做参数再次传递给ENTRYPOIINT指令中指定的命令。")]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:latest")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v("]")]),s._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gocloudcoder/test1:v2"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322195916619.png",alt:"image-20210322195916619"}})]),s._v(" "),t("p",[s._v("接下来我们指定一个-l选项,那么实际运行的就是 ls -l")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322200015865.png",alt:"image-20210322200015865"}})]),s._v(" "),t("p",[s._v("如果我们在Dockerfile中指定ENTRYPOINT中指定ls的参数,在docker run的时候再指定一下参数会如何呢？")]),s._v(" "),t("p",[s._v("Dockerfile中的ENTRYPOINT中的参数一定会执行,docker run中指定的参数也会执行。")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322213959242.png",alt:"image-20210322213959242"}})]),s._v(" "),t("p",[s._v("我们可以组合使用ENTRYPOINT和CMD指令来完成一些巧妙的工作")]),s._v(" "),t("p",[s._v("如")]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:latest")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v("]")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-l"')]),s._v("]")]),s._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gocloudcoder/test1:v4"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[s._v("将默认执行 ls -l")]),s._v(" "),t("p",[s._v("-l参数可以更换成-a等参数")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322214553320.png",alt:"image-20210322214553320"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322214609541.png",alt:"image-20210322214609541"}})]),s._v(" "),t("p",[s._v("这个搭配起来非常的巧妙啊！")]),s._v(" "),t("p",[s._v("【WORKDIR】")]),s._v(" "),t("p",[s._v("WORKDIR指令用来在从镜像创建一个新容器时,在容器内部设置一个工作目录,ENTRYPOINT和/或CMD指定的程序会在这个目录下执行。")]),s._v(" "),t("p",[s._v("我们可以使用该指令为Dockerfile中后续的一系列指令设置工作目录,也可以为最终的容器设置工作目录。")]),s._v(" "),t("p",[s._v("相当于linux命令中的cd命令。")]),s._v(" "),t("p",[s._v("在docker run命令时使用-w参数在运行时覆盖工作目录")]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:latest")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /etc")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v("]")]),s._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gocloudcoder/test1:v5"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322215649494.png",alt:"image-20210322215649494"}})]),s._v(" "),t("p",[s._v("使用-w参数覆盖WORKDIR")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210322215751656.png",alt:"image-20210322215751656"}})]),s._v(" "),t("p",[s._v("【ENV】")]),s._v(" "),t("p",[s._v("ENV指令用来在镜像构建过程中设置环境变量。")]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:latest")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" GOROOT /usr/local/bin/go")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GOROOT")])]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210323111357270.png",alt:"image-20210323111357270"}})]),s._v(" "),t("p",[s._v("这些环境变量会持久保存到从我们的镜像创建的任何容器中。")]),s._v(" "),t("p",[s._v("我们也可以使用在docker run命令中使用-e参数来传递环境变量。这只在运行时有效。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GOROOT=/usr/loca/bin/go2"')]),s._v(" gocloudcoder/test1:v6 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"http://oss.jaronnie.com/image-20210323112127294.png",alt:"image-20210323112127294"}})]),s._v(" "),t("p",[s._v("【USER】")]),s._v(" "),t("p",[s._v("USER指令用来指定该镜像会以什么样的用户去运行。")]),s._v(" "),t("p",[s._v("默认用户是root。")]),s._v(" "),t("p",[s._v("【VOLUME】")]),s._v(" "),t("p",[s._v("用于持久化或者在宿主机和容器之间共享数据,这个指令非常的重要。")]),s._v(" "),t("ul",[t("li",[s._v("卷可以再容器间共享和重用")]),s._v(" "),t("li",[s._v("一个容器可以不是必须和其他容器共享卷")]),s._v(" "),t("li",[s._v("对卷的修改是立即生效的")]),s._v(" "),t("li",[s._v("对卷的修改不会对更新镜像产生影响")]),s._v(" "),t("li",[s._v("卷会一直存在直到没有任何容器再使用它")])]),s._v(" "),t("p",[s._v("卷功能让我们将数据如源代码数据库等其他内容添加到镜像中而不是将这些内容提交到镜像中,并且允许我们在多个容器间共享这些内容。")]),s._v(" "),t("p",[s._v("我们可以利用此功能来测试容器和内部的应用程序代码,管理日志,或者处理容器内部的数据库。")]),s._v(" "),t("p",[s._v("这个我们一般在docker run命令式使用-v参数使用")]),s._v(" "),t("p",[s._v("后续在实战中会使用这个参数使用,非常的重要。")]),s._v(" "),t("p",[s._v("【ADD】")]),s._v(" "),t("p",[s._v("ADD指令用来将构建环境下的文件和目录复制到镜像中。")]),s._v(" "),t("p",[s._v("ADD指令需要源文件位置和目的文件位置两个参数。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("ADD softwart.lic /opt/application/sortware.lic\n")])])]),t("p",[s._v("ADD指令会将构建目录下的software.lic文件复制到镜像中的/opt/application/software.lic。")]),s._v(" "),t("p",[s._v("ADD指定也可以添加目录。通过末尾的"),t("code",[s._v("/")]),s._v("判定位目录,否则位文件。所以需要注意这一点。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意:ADD在处理本地归档文件时会自动将归档文件解开。")]),s._v(" "),t("p",[s._v("如果目的位置不存在的话,Docker将会为我们创建一个全路径,包括路径中的任何目录,即mkdir -p的作用。")])]),s._v(" "),t("p",[s._v("【COPY】")]),s._v(" "),t("p",[s._v("COPY指令类似ADD,它们根本的不同是COPY只关心在构建上下文中复制本地文件,而不会做文件提取和解压工作。")]),s._v(" "),t("p",[s._v("必须要把上传的文件或目录放在与Dockerfile同目录下,否则将会无效。")]),s._v(" "),t("p",[s._v("COPY指令的目的位置必须是容器内部绝对路径。")]),s._v(" "),t("p",[s._v("【ONBUILD】")]),s._v(" "),t("p",[s._v("ONBUILD指令能为镜像添加触发器。当一个镜像被用作其他镜像的基础镜像时,该镜像中的触发器将会被执行。")]),s._v(" "),t("p",[s._v("这个功能用的不是很多。")])])}),[],!1,null,null,null);t.default=r.exports}}]);